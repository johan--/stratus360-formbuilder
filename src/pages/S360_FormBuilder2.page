<apex:page showHeader="false" docType="html-5.0" standardController="S360_Form_Config__c" extensions="S360_Form_Builder_Ext" standardStyleSheets="false">
    <head>
        <meta charset="utf-8"/>
        <title>Form.io Form Builder</title>
        <meta name="viewport" content="width=device-width"/>
        
        <link rel="stylesheet" href="{!URLFOR($Resource.formio, '/css/angular-json-explorer.min.css')}"/>
        <link rel="stylesheet" href="{!URLFOR($Resource.Bootstrap337, '/dist/css/bootstrap.min.css.yeti.css')}" />
        <link rel="stylesheet" href="{!URLFOR($Resource.FontAwesome470, '/css/font-awesome.min.css')}" />
        <link rel="stylesheet" href="{!URLFOR($Resource.ngFormBuilder, 'ngFormBuilder-full.min.css')}"/>
        <link rel="stylesheet" href="{!URLFOR($Resource.FontAwesome463, '/css/font-awesome.min.css')}" />
        
    </head>
    <body ng-app="formBuilder">
        <!-- BROWSE HAPPY BEGINS HERE -->
        <style>
            .browsehappy {
            display:block;
            width:100%;
            height:100px;
            background-color:#f2dede;
            margin: 0 0 10px;
            font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
            font-size: 22px;
            line-height: 1.4;
            color: #333;
            padding-top: 15px;
            vertical-align:middle;
            }
            .browsehappy span {
            vertical-align:middle;
            margin:20px 20px 20px 20px;
            background:url("https://cdn.rawgit.com/alrra/browser-logos/master/internet-explorer/internet-explorer_64x64.png") no-repeat;
            height:64px;
            width:64px;
            display:inline-block;
            }
            
            .formbuilder {
            /*height: 600px;*/
            }
            
            .formcomponents {
            width: 30%;
            }
            
            .formarea {
            width: 70%;
            }
            
            .component-settings .nav-link {
            font-size: 0.6em;
            }
            
            .jsonviewer {
            max-height: 600px;
            overflow: scroll;
            }
            
            .form-type-select {
            display: inline-block;
            width: 100px;
            height: 28px;
            vertical-align: top;
            }
            
            
            .visibilityHiddenClass{
            	visibility: hidden;
            }
            
            a.nav-link.ng-binding{
            	font-size: 0.9em;
            }
            
            .inputPrintTemplateContainer{
                position: fixed;
                z-index: 100000;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                bottom: 0;
                background: rgba(255,255,255,0.8);
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                right: 0;
            }
            
            .inputPrintTemplateContainer .modal{
            	display: block;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                position: relative;
            }
        </style>
        <!--[if IE 6]><p class="browsehappy"><img />You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p><![endif]-->
        <!--[if IE 7]><p class="browsehappy"><img src="https://cdn.rawgit.com/alrra/browser-logos/master/internet-explorer/internet-explorer_64x64.png" />You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p><![endif]-->
        <!--[if IE 8]><p class="browsehappy"><img src="https://cdn.rawgit.com/alrra/browser-logos/master/internet-explorer/internet-explorer_64x64.png" />You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p><![endif]-->
        <!--[if IE 9]><p class="browsehappy"><img src="https://cdn.rawgit.com/alrra/browser-logos/master/internet-explorer/internet-explorer_64x64.png" />You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p><![endif]-->
        <!-- BROWSE HAPPY ENDS HERE -->
        
        <apex:form >
            <apex:pageBlock mode="edit">
                <apex:pageBlockButtons >
                    <apex:commandButton styleClass="slds-button slds-button--brand slds-not-selected" value="Save" action="{!save}" onclick="getUsedFields()"/>
                    <apex:outputPanel id="autoSaveStatus">
                        <p id="autoSaveMessage"></p>
                    </apex:outputPanel>
                </apex:pageBlockButtons>
                
                <div class="page-content" ng-app="formioApp">
                    <div class="container-fluid">
                        <div>
                            <div class="row">
                                <div class="well" style="background-color: #fdfdfd;">
                                    <form-builder form="form"></form-builder>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </apex:pageBlock>
            
            <div class="visibilityHiddenClass">
                <apex:inputField value="{!S360_Form_Config__c.Name}"/> <p/>
                <apex:inputField id="Form_Config_Primary_Object" value="{!S360_Form_Config__c.Primary_Object__c}" /> <p/>
                <apex:inputText id="Form_Config_JSON" value="{!jsonConfig}" /> <p/>
                <apex:inputField id="Form_Config_Field" value="{!S360_Form_Config__c.Field__c}" /> <p/>
                
                <!-- load field -->
                <apex:inputField id="autoSaveInterval" value="{!S360_Form_Config__c.AutoSave_Interval__c}" /> <p/>
                <apex:inputField id="isAutoSave" value="{!S360_Form_Config__c.AutoSave__c}" /> <p/>
            </div>
            
            <apex:actionFunction name="autoSaveAF" action="{!autoSave}" rerender="autoSaveStatus"/>
            <apex:outputPanel id="tmpInputPrintTempate">
                <div class="visibilityHiddenClass">
                    <apex:inputText id="printTemplateName" value="{!printAttachmentName}" />
                    <apex:inputText id="printTemplateId" value="{!printAttachmentId}" />
                </div>
                
            </apex:outputPanel>
        </apex:form>
        
        <div id="inputPrintTempate" style="visibility: hidden;" class="inputPrintTemplateContainer">
            
            <div class="modal">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" aria-hidden="true" onclick="closeInputPrintTempate()">&times;</button>
                            <h4 class="modal-title">Upload Template</h4>
                        </div>
                        <div class="modal-body">
                            <input type="file" id="attachmentFile" class="form-control-file"/>
                        </div>
                        <div class="modal-footer">
                            <button type="button" id="btnClosePrintTemplate" class="btn btn-default" onclick="closeInputPrintTempate()">Close</button>
                            <button type="button" id="btnUploadPrintTemplate" onclick="uploadFile()" class="btn btn-success">Upload</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <apex:includeScript value="{!URLFOR($Resource.formio, '/js/ckeditor.4.5.11.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.formio, '/js/signature_pad.min.1.5.3.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.ngFormBuilder, 'ngFormBuilder-full.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.formio, '/js/lodash.min.4.17.4.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.formio, '/js/angular-json-explorer.min.js')}"/>
        
        <script type="text/javascript">
        var formConfig = '';
        var printButtonScope;
        
        // start auto save
        autoSave();
        // end of start auto save
        
            angular
        .module("formBuilder", ["ui.bootstrap", "ui.select", "formio", "ngFormBuilder", "ngJsonExplorer"])
        .run(run).config(config);

		run.$inject = ['$rootScope', 'formioComponents', '$timeout', '$templateCache'];
    	config.$inject = ['formioComponentsProvider'];

		function config(formioComponentsProvider){
            
        }
		
        function run($rootScope, formioComponents, $timeout, $templateCache){
            $rootScope.displays = [{
                name: 'form',
                title: 'Form'
            }, {
                name: 'wizard',
                title: 'Wizard'
            }];
            
            
            formioComponents.components.container.title = 'Related List';
            formioComponents.components.fieldset.title = 'Panel';
            formioComponents.components.panel.title = 'Wizard';
            
            // set captcha image
           	formioComponents.components.captcha.settings.captchaImagePreview = '{!URLFOR($Resource.ngFormBuilder, "images/recaptcha-image.png")}';
            
            //disabled components
            formioComponents.components.textarea.disabled = true;
            formioComponents.components.selectboxes.disabled = true;
            formioComponents.components.radio.disabled = true;
            formioComponents.components.content.disabled = true;
            //formioComponents.components.email.disabled = true;
            //formioComponents.components.phoneNumber.disabled = true;
            formioComponents.components.address.disabled = true;
            formioComponents.components.day.disabled = true;
            formioComponents.components.time.disabled = true;
            formioComponents.components.currency.disabled = true;
            formioComponents.components.resource.disabled = true;
            formioComponents.components.form.disabled = true;
            formioComponents.components.custom.disabled = true;
            formioComponents.components.datagrid.disabled = true;
            formioComponents.components.editgrid.disabled = true;
            formioComponents.components.survey.disabled = true;
            formioComponents.components.table.disabled = true;
            
            
            // handle print callback
            formioComponents.components.buttonprint.settings.callback = function(scope){
                document.getElementById('inputPrintTempate').style.visibility = "visible";
                printButtonScope = scope;
            }
            
            
            var unescapeJSON = '{!JSENCODE(jsonConfig)}';
            if(unescapeJSON!='')
            {
                $rootScope.form = JSON.parse(unescapeJSON);
            }
            formConfig = $rootScope.form;
            debugger;
            
            $rootScope.renderForm = true;
            
            $rootScope.$on('formUpdate', function(event, form) {
                angular.merge($rootScope.form, form);
                formConfig = $rootScope.form;
                debugger;
                
                $rootScope.renderForm = false;
                setTimeout(function() {
                    $rootScope.renderForm = true;
                }, 10);
                
            });
            
            if(unescapeJSON!='')
            {
                var originalComps = _.cloneDeep($rootScope.form.components);
                originalComps.push(angular.copy(formioComponents.components.button.settings));
                $rootScope.jsonCollapsed = true;
                $timeout(function() {
                    $rootScope.jsonCollapsed = false;
                }, 200);
            }
            
            var currentDisplay = 'form';
            $rootScope.$watch('form.display', function(display) {
                debugger;
                if (display && (display !== currentDisplay)) {
                    currentDisplay = display;
                    if (display === 'form') {
                        $rootScope.form.components = originalComps;
                    } else {
                        $rootScope.form.components = [{
                            type: 'panel',
                            input: false,
                            title: 'Page 1',
                            theme: 'default',
                            components: originalComps
                        }];
                    }
                }
            });
        }
        
        function getUsedFields(){
			            
            var jsonFieldElement = document.getElementById('j_id0:j_id2:Form_Config_JSON');
            debugger;
            if(formConfig != '' && formConfig != undefined){
                jsonFieldElement.value = JSON.stringify(formConfig);
            }
            debugger;
            
            var fieldsConfig = document.getElementById('j_id0:j_id2:Form_Config_Field');
            
            var config = formConfig;
            var fields = collectField(config);
            if(fields.indexOf('Name') == -1){
                //Not sure why we add name here
               // fields.push('Name');
            }
            fieldsConfig.value = fields.join(',');
        }
        
        function collectField(data){
            var acceptedFields = {!objectFields};
            var fields = [];
            data.components.forEach(function(cmp){
                if(cmp.type == 'columns'){
                    cmp.columns.forEach(function(col){
                        fields = fields.concat(collectField(col));
                    });
                }else if(cmp.type == 'fieldset' || cmp.type == 'well' || cmp.type == 'panel'){
                    fields = fields.concat(collectField(cmp));
                }else if(cmp.type != 'button' && cmp.type != 'htmlelement'){
                    if(acceptedFields.indexOf(cmp.key) != -1 || acceptedFields.indexOf(cmp.key.split('__r')[0] + '__r') != -1){
                        fields.push(cmp.key);
                    }
                }
            });
            
            return fields;
        }
        
        function autoSave(){
            var autoSaveInterval = '{!S360_Form_Config__c.AutoSave_Interval__c}' == '' ? 0 : parseInt('{!S360_Form_Config__c.AutoSave_Interval__c}');
            var isAutoSave = {!S360_Form_Config__c.AutoSave__c};
            
            if(!autoSaveInterval || autoSaveInterval == 0){
                isAutoSave = false;
            }
            
            if(isAutoSave){
                setInterval(function(){
                    document.getElementById("autoSaveMessage").innerHTML = "Saving...";
                    getUsedFields();
                    autoSaveAF();
                }, 1000 * 60 * autoSaveInterval);
            }
        }
        
        
        /**
        * upload print template handler
        */
        
        
        function closeInputPrintTempate(){
            document.getElementById('inputPrintTempate').style.visibility = "hidden";
        }
        
        var maxStringSize = 6000000;    //Maximum String size is 6,000,000 characters
        var maxFileSize = 4350000;      //After Base64 Encoding, this is the max file size
        var chunkSize = 950000;         //Maximum Javascript Remoting message size is 1,000,000 characters
        var attachment;
        var attachmentName;
        var fileSize;
        var positionIndex;
        var doneUploading;
        
        function uploadFile() {
            document.getElementById('btnUploadPrintTemplate').innerHTML = 'Uploading...';
            var file = document.getElementById('attachmentFile').files[0];
            
            if(file != undefined) {
                if(file.size <= maxFileSize) {
                    attachmentName = file.name;
                    var fileReader = new FileReader();
                    fileReader.onloadend = function(e) {
                        attachment = window.btoa(this.result);  //Base 64 encode the file before sending it
                        positionIndex=0;
                        fileSize = attachment.length;
                        doneUploading = false;
                        if(fileSize < maxStringSize) {
                            uploadAttachment(null);
                        } else {
                            alert("Base 64 Encoded file is too large.  Maximum size is " + maxStringSize + " your file is " + fileSize + ".");
                        }
                        
                    }
                    fileReader.onerror = function(e) {
                        alert("There was an error reading the file.  Please try again.");
                    }
                    fileReader.onabort = function(e) {
                        alert("There was an error reading the file.  Please try again.");
                    }
                    
                    fileReader.readAsBinaryString(file);  //Read the body of the file
                    
                } else {
                    alert("File must be under 4.3 MB in size.  Your file is too large.  Please try again.");
                }
            } else {
                alert("You must choose a file before trying to upload it");
            }
        }
        
        
        function uploadAttachment(fileId) {
            var attachmentBody = "";
            if(fileSize <= positionIndex + chunkSize) {
                attachmentBody = attachment.substring(positionIndex);
                doneUploading = true;
            } else {
                attachmentBody = attachment.substring(positionIndex, positionIndex + chunkSize);
            }
            
            Visualforce.remoting.Manager.invokeAction(
            	'{!$RemoteAction.S360_Form_Builder_Ext.doUploadAttachment}',
                '{!S360_Form_Config__c.Id}',attachmentBody, attachmentName, fileId, 
                function(result, event) {
                    console.log(result);
                    if(event.type === 'exception') {
                        console.log("exception");
                        console.log(event);
                    } else if(event.status) {
                        if(result.substring(0,3) == '00P') {
                            if(doneUploading == true) {
                                alert('done uploading');
                                document.getElementById('btnUploadPrintTemplate').innerHTML = 'Upload';
                                
                                // update form builder scope
                                printButtonScope.component.attachmentId = result;
                				printButtonScope.component.attachmentName = attachmentName;
                            } else {
                                positionIndex += chunkSize;
                                uploadAttachment(result);
                            }
                        }
                    } else {
                        console.log(event.message);
                    }
                },
                {buffer: true, escape: true, timeout: 120000}
            );
        }
        </script>
    </body>
</apex:page>